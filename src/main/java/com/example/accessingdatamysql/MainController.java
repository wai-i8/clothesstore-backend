package com.example.accessingdatamysql;

import org.apache.tomcat.util.http.parser.Authorization;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;


import org.springframework.web.bind.annotation.CrossOrigin;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

@CrossOrigin
@Controller	// This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called clothesRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ClothesRepository clothesRepository;
	@Autowired
	private UsersRepository usersRepository;
	@Autowired
	private OrdersRepository ordersRepository;

	@PostMapping(path="/login") // Map ONLY POST Requests
	public @ResponseBody Map<String, String> login (@RequestBody users data) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		//Clothes n = new Clothes();
		//n.setName(name);
		//n.setPrice(price);
		//clothesRepository.save(n);
	HashMap<String, String> map = new HashMap<>();
	try{
		if(usersRepository.verifyUser(data.getEmail(),data.getPwd()) > 0){
			map.put("status", "1");
			Date expireDate = new Date(System.currentTimeMillis()+ 30 * 60 * 1000);
			String jwtToken = Jwts.builder()
			.setSubject(data.getEmail()) //我以email當subject
			.setId(usersRepository.findId(data.getEmail(),data.getPwd()))
			.setExpiration(expireDate)
			//MySecret是自訂的私鑰，HS512是自選的演算法，可以任意改變
			.signWith(SignatureAlgorithm.HS512,"rJFtYS6XJHQtFQ5WFaWET5Opg")
			.compact();		
			
			map.put("token", jwtToken);
			map.put("id", usersRepository.findId(data.getEmail(),data.getPwd()));
			map.put("email", data.getEmail());
			map.put("name", usersRepository.findName(data.getEmail(),data.getPwd()));
			return map;
		}
	}catch(Exception e){
		System.err.println("Error : "+e);
	}
	map.put("status", "0");
	return map;
	}

	@PutMapping(path="/modifypwd") // Map ONLY POST Requests
	public @ResponseBody HashMap<String, String> modifypwd (@RequestParam String email,@RequestParam String pwd,@RequestParam String newPwd) {
		HashMap<String, String> map = new HashMap<>();
		try{
			if(usersRepository.verifyUser(email,pwd) > 0){
				map.put("status", "1");
				usersRepository.modifypwd(email, newPwd);
				return map;
			}
		}catch(Exception e){
			System.err.println("Error : "+e);
		}
		map.put("status", "0");
		return  map;
	}

	@PostMapping(path="/signup") // Map ONLY POST Requests
	public @ResponseBody String signup (@RequestBody users data) {
		users u = new users();
		u.setLastName(data.getLastName());
		u.setFirstName(data.getFirstName());
		u.setEmail(data.getEmail());
		u.setPwd(data.getPwd());
		usersRepository.save(u);
		return "success";
	}

	@GetMapping(path="/checkemail")
	public @ResponseBody Map<String, String> checkEmail(@RequestParam String email) {
		// This returns a JSON or XML with the clothess
		HashMap<String, String> map = new HashMap<>();
		usersRepository.findEmail(email);
		map.put("duplicate", usersRepository.findEmail(email));
		return map;
	}

	@GetMapping(path="/clothes")
	public @ResponseBody Iterable<clothes> getAllClothes() {
		// This returns a JSON or XML with the clothess
		return clothesRepository.findAll();
	}

	@GetMapping(path="/findclothes")
	public @ResponseBody Iterable<clothes> getClothes(@RequestParam Integer id) {
		// This returns a JSON or XML with the clothess
		return clothesRepository.findItem(id);
	}

	@GetMapping(path="/orders")
	public @ResponseBody Iterable<orders> findUserOrders(@RequestParam Integer user_id,HttpServletRequest req) {
		// This returns a JSON or XML with the clothess
		String authorHeader =  req.getHeader("Authorization");
        String bearer ="Bearer ";
		String token = authorHeader.substring(bearer.length());
		try{
			Claims claims = Jwts.parser()
							.setSigningKey("rJFtYS6XJHQtFQ5WFaWET5Opg")
							.parseClaimsJws(token)
							.getBody();
			return ordersRepository.findUserOrders(Integer.parseInt(claims.getId()));
			
		}catch(Exception e){
			System.err.println("Error : "+e);
		}
		return null;
	}

	@PostMapping(path="/commitorder") // Map ONLY POST Requests
	public @ResponseBody HashMap<String, String> commitOrder (@RequestBody orders data,HttpServletRequest req) {
		String authorHeader =  req.getHeader("Authorization");
        String bearer ="Bearer ";
		String token = authorHeader.substring(bearer.length());
		HashMap<String, String> map = new HashMap<>();
		try{
			Claims claims = Jwts.parser()
			.setSigningKey("rJFtYS6XJHQtFQ5WFaWET5Opg")
			.parseClaimsJws(token)
			.getBody();
			
			orders o = new orders();
			o.setUser_id(Integer.parseInt(claims.getId()));
			LocalDateTime localDateTime = LocalDateTime.now();  
			o.setTime(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(localDateTime));
			o.setItems(data.getItems());
			o.setAmount(data.getAmount());
			ordersRepository.save(o);

			
			map.put("status", "1");
			return map;
		}catch(Exception e){
			System.err.println("Error : "+e);
			map.put("status", "0");
			return map;
		}
	}

	@GetMapping(path="/testing") // Map ONLY POST Requests
	public @ResponseBody String testing (HttpServletRequest req) {
        //System.out.println("Request URI: " + req.getHeader("Authorization"));
		String authorHeader =  req.getHeader("Authorization");
        String bearer ="Bearer ";
		String token = authorHeader.substring(bearer.length());
		try{
			Claims claims = Jwts.parser()
							.setSigningKey("rJFtYS6XJHQtFQ5WFaWET5Opg")
							.parseClaimsJws(token)
							.getBody();
			System.out.println("JWT payload: "+claims.getId());
			claims.getExpiration();
			return "success";
			
		}catch(Exception e){
			System.err.println("Error : "+e);
			return "failed";
		}
	}
}
